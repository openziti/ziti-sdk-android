/*
 * Copyright (c) 2018-2021 NetFoundry, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    alias(libs.plugins.android.lib)
    alias(libs.plugins.kotlin.android)
    id("maven-publish")
}

ext {
    description "Ziti SDK for Android"
}

android {
    namespace = "org.openziti.android"
    compileSdk = 33
    ndkVersion = "21.3.6528147"

    buildFeatures {
        buildConfig = true
    }

    defaultConfig {
        minSdkVersion 26
        targetSdkVersion 33
        versionCode 1

        buildConfigField "String", "GIT_COMMIT", "\"${semver.info.shortCommit}\""
        buildConfigField "String", "GIT_BRANCH", "\"${semver.info.branch.id}\""
        buildConfigField "String", "ZITI_VERSION", "\"${project.version}\""

        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'

        consumerProguardFiles 'consumer-rules.pro'
    }

    compileOptions {
        targetCompatibility = "11"
        sourceCompatibility = "11"
    }

    kotlin {
        jvmToolchain(11)
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    publishing {
        singleVariant("release") {
            withJavadocJar()
            withSourcesJar()
        }
    }

    lintOptions {
        abortOnError false
    }
}

dependencies {
    api(libs.ziti) {
        exclude module:"lazysodium-java"
        exclude module:"jna"
    }
    api(libs.lazysodium.android)
    api(libs.jna)

    implementation(libs.kotlin)
    implementation(libs.coroutines.android)
    implementation(libs.core.ktx)
    implementation(libs.lifecycle.viewmodel.ktx)
    implementation(libs.lifecycle.livedata.ktx)

    testApi(libs.jupiter.api)
    testImplementation(libs.jupiter.engine)

    androidTestImplementation(libs.retrofit.core)
    androidTestImplementation(libs.retrofit.gson)

    androidTestImplementation(libs.junit)
    androidTestImplementation(libs.espresso.core)

}

afterEvaluate {
    publishing {
        publications {
            zitiAndroid(MavenPublication) {
                groupId = project.group
                version = project.version
                from components.release
            }
        }
    }

    apply from: rootProject.file("publish.gradle")
}
